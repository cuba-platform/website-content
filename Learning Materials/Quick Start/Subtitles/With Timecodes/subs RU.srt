1
00:00:00,366 --> 00:00:05,832
Привет! Это видео поможет вам быстро освоить базовые навыки для работы с платформой CUBA. 

2
00:00:05,833 --> 00:00:11,733
CUBA - это фреймворк с открытым кодом, основанный на хорошо знакомом всем фреймворке Spring. 

3
00:00:11,733 --> 00:00:17,099
Цель создания фреймворка - унификация процессов разработки корпоративных приложений. 

4
00:00:17,100 --> 00:00:19,833
В этом видео мы рассмотрим следующие темы: 

5
00:00:19,833 --> 00:00:23,633
Создание модели данных и базы данных 

6
00:00:23,633 --> 00:00:29,499
Разработка и изменение пользовательского интерфейса 

7
00:00:29,500 --> 00:00:34,833
Создание бизнес логики 

8
00:00:34,833 --> 00:00:38,933
В качестве примера мы разработаем простое, но полнофункциональное приложение 

9
00:00:38,933 --> 00:00:41,333
для планирования докладов на конференции. 

10
00:00:41,333 --> 00:00:43,933
Этого будет достаточно для того, чтобы начать создавать 

11
00:00:43,933 --> 00:00:49,133
свои собственные приложения с использованием фреймворка CUBA. 

12
00:00:49,133 --> 00:00:50,733
Для того, чтобы повторить все, что 

13
00:00:50,733 --> 00:00:56,399
показано в этом видео, нужно установить плагин для IntelliJ IDEA - CUBA студию. 

14
00:00:58,533 --> 00:01:04,366
Создадим пустой CUBA проект с пространством имен - planner. 

15
00:01:04,366 --> 00:01:09,599
Будем использовать JDK 11 и последнюю стабильную версию CUBA. 

16
00:01:12,000 --> 00:01:17,266
Будем использовать базу данных HSQLDB, указанную по умолчанию. 

17
00:01:17,266 --> 00:01:21,266
Вы можете выбрать другую базу данных из раскрывающегося списка. 

18
00:01:21,266 --> 00:01:25,332
Параметры подключения оставим без изменения. 

19
00:01:25,333 --> 00:01:27,799
Назовем проект “Планировщик докладов”. 

20
00:01:30,433 --> 00:01:34,899
После первого запуска студия предлагает активировать пробный период коммерческой подписки, 

21
00:01:34,900 --> 00:01:37,366
который составляет 28 дней. 

22
00:01:37,366 --> 00:01:41,732
После активации нам будут доступны дополнительные графические дизайнеры, 

23
00:01:41,733 --> 00:01:44,099
которые упростят разработку приложения. 

24
00:01:44,100 --> 00:01:45,866
Активируем подписку.

25
00:01:45,866 --> 00:01:48,899
Сначала посмотрим на интерфейс студии. 

26
00:01:48,900 --> 00:01:52,133
Слева находится дерево CUBA-проекта. 

27
00:01:52,133 --> 00:01:57,133
В центре стартовая страница с быстрым доступом к некоторым функциям CUBA Studio, 

28
00:01:57,133 --> 00:02:02,566
документации, магазину компонентов, а также информацией о версиях и подписке. 

29
00:02:02,566 --> 00:02:06,532
В правой части экрана находится окно Gradle. 

30
00:02:06,533 --> 00:02:12,166
CUBA использует этот инструмент для сборки и запуска приложения. 

31
00:02:12,166 --> 00:02:16,632
Внизу располагается стандартное окно сборки проекта. 

32
00:02:16,633 --> 00:02:20,633
Закроем некоторые окна, чтобы освободить место на экране. 

33
00:02:20,633 --> 00:02:26,033
Главное меню CUBA дает быстрый доступ к CUBA-специфичным функциям среды разработки. 

34
00:02:28,866 --> 00:02:33,032
Давайте создадим JPA классы и ограничения целостности: 

35
00:02:33,033 --> 00:02:36,533
обязательность полей, уникальные и внешние ключи. 

36
00:02:38,633 --> 00:02:43,033
В модели данных будет только две сущности: Докладчик и Доклад. 

37
00:02:46,366 --> 00:02:49,966
Для упрощения процесса разработки мы добавили в CUBA студию 

38
00:02:49,966 --> 00:02:54,399
визуальный дизайнер для создания JPA классов. 

39
00:02:54,400 --> 00:02:59,833
Правым кликом мыши на узле “Data Model” в дереве вызовем меню создания сущности.

40
00:02:59,833 --> 00:03:03,199
Сперва создадим сущность Докладчик. 

41
00:03:03,200 --> 00:03:05,100
В ней будет три поля: 

42
00:03:05,100 --> 00:03:06,466
имя (обязательное), 

43
00:03:09,533 --> 00:03:10,133
фамилия

44
00:03:11,500 --> 00:03:12,500
(необязательное) 

45
00:03:12,500 --> 00:03:16,200
и электронная почта (обязательное и уникальное). 

46
00:03:16,200 --> 00:03:20,800
Для контроля правильности ввода на поле электронной почты мы добавим проверку. 

47
00:03:20,800 --> 00:03:25,000
В CUBA мы можем задать способ представления сущностей в текстовом формате 

48
00:03:25,000 --> 00:03:30,200
для правильного отображения данных в пользовательском интерфейсе - имя экземпляра сущности. 

49
00:03:30,200 --> 00:03:34,566
Для отображения докладчика мы выберем поля “Имя” и “Фамилия”. 

50
00:03:34,566 --> 00:03:36,632
Посмотрим на дизайнер сущностей. 

51
00:03:36,633 --> 00:03:43,433
Рядом с визуальным редактором на вкладке Текст мы увидим, что создали обычный класс с JPA аннотациями. 

52
00:03:43,433 --> 00:03:48,699
Можно исправить код в текстовом редакторе, визуальный редактор отобразит эти изменения. 

53
00:03:48,700 --> 00:03:52,166
Кроме того, можно посмотреть оператор DDL на вкладке Preview 

54
00:03:52,166 --> 00:03:54,799
и, если необходимо, добавить индексы. 

55
00:03:54,800 --> 00:03:58,266
Например, мы ожидаем много поисков по фамилии. 

56
00:03:58,266 --> 00:04:02,366
Чтобы сделать поиск более эффективным, добавим индекс для фамилии. 

57
00:04:08,500 --> 00:04:10,266
Давайте пойдем дальше. 

58
00:04:10,266 --> 00:04:14,666
Создадим сущность Доклад и соединим ее с Докладчиком. 

59
00:04:14,666 --> 00:04:18,866
Создадим обязательное строковое поле - “Тема”. 

60
00:04:18,866 --> 00:04:23,199
После этого добавим дату и время начала доклада. 

61
00:04:23,200 --> 00:04:25,200
Далее добавим длительность  доклада 

62
00:04:27,900 --> 00:04:30,133
и проверку для этого поля. 

63
00:04:30,133 --> 00:04:34,733
Время окончания доклада будет вычисляемым, определим его позже. 

64
00:04:34,733 --> 00:04:37,299
Теперь сделаем ссылку на докладчика. 

65
00:04:37,300 --> 00:04:39,600
Это отношение - многие-к-одному, 

66
00:04:39,600 --> 00:04:46,100
так что сделаем поле-ассоциацию, назовем его “докладчик”, а тип данных - ссылка на класс “Докладчик”. 

67
00:04:48,533 --> 00:04:54,433
В дополнение, создадим поле “описание”, в котором будет содержаться краткое описание доклада. 

68
00:04:54,433 --> 00:04:59,133
Для отображения сущности в интерфейсе выберем поле Тема вместо Описания. 

69
00:05:02,666 --> 00:05:06,266
Пришло время сделать вычисляемое поле - окончание доклада. 

70
00:05:13,133 --> 00:05:16,866
Создадим геттер и назовем его getEndDate, 

71
00:05:18,433 --> 00:05:20,999
поставим аннотацию @MetaProperty. 

72
00:05:21,000 --> 00:05:27,000
Для вычисляемого атрибута нужно определить поля, которые будут загружаться - начало доклада и длительность. 

73
00:05:29,666 --> 00:05:33,599
Затем напишем алгоритм вычисления времени окончания доклада. 

74
00:05:36,366 --> 00:05:39,332
Обратите внимание, что студия подсвечивает метод, 

75
00:05:39,333 --> 00:05:43,699
потому что нужно определить текст атрибута для отображения на экранах. 

76
00:05:43,700 --> 00:05:45,633
Пропишем его в появившемся окне.

77
00:05:46,933 --> 00:05:49,633
Вернемся в дизайнер. 

78
00:05:49,633 --> 00:05:52,366
Видим, что поле окончания доклада добавлено, 

79
00:05:52,366 --> 00:05:57,732
оно доступно только для чтения и связанные атрибуты определены. 

80
00:05:57,733 --> 00:05:59,099
Доменная модель создана.

81
00:06:01,933 --> 00:06:07,333
Теперь можно заняться созданием экранов для выполнения базовых операций над данными приложения. 

82
00:06:11,166 --> 00:06:15,499
В CUBA студии есть генератор для создания пользовательского интерфейса. 

83
00:06:15,500 --> 00:06:18,466
Мы создадим простые, но полезные экраны: 

84
00:06:18,466 --> 00:06:23,466
Браузер - для просмотра данных в табличной форме

85
00:06:23,466 --> 00:06:26,866
Редактор - для редактирования одной строки данных

86
00:06:29,533 --> 00:06:32,533
Создадим экраны для работы с докладчиками. 

87
00:06:32,533 --> 00:06:35,233
Сущность “Докладчик” довольно простая, 

88
00:06:35,233 --> 00:06:40,666
поэтому просто оставим значения по умолчанию для генерации.

89
00:06:40,666 --> 00:06:45,466
Видим, что каждый экран состоит из дескриптора - файла с разметкой в формате XML, 

90
00:06:45,466 --> 00:06:50,232
который отвечает за расположение элементов на экране, 

91
00:06:50,233 --> 00:06:54,933
и  контроллера, написанного на Java, который отвечает за обработку событий. 

92
00:06:57,300 --> 00:07:02,200
Обратим внимание на разметку в XML-файле: здесь два основных блока. 

93
00:07:02,200 --> 00:07:06,466
Первый определяет, как данные извлекаются из базы данных. 

94
00:07:06,466 --> 00:07:11,432
Второй определяет позиции компонентов на экране. 

95
00:07:11,433 --> 00:07:15,033
Теперь создадим браузер и редактор для работы с докладами. 

96
00:07:17,933 --> 00:07:21,633
Здесь надо немного остановиться и объяснить, как работает CUBA. 

97
00:07:21,633 --> 00:07:23,233
Поговорим о представлениях. 

98
00:07:23,233 --> 00:07:29,366
В CUBA “представление” определяет то, значения каких полей сущности извлекаются из базы данных.  

99
00:07:29,366 --> 00:07:35,299
Создавать представления можно либо в отдельных файлах, чтобы затем использовать в разных модулях приложения, 

100
00:07:35,300 --> 00:07:37,466
либо при создании экранов. 

101
00:07:37,466 --> 00:07:41,132
В нашем примере мы определим представление при создании экрана, 

102
00:07:41,133 --> 00:07:42,899
просто выбрав нужные данные. 

103
00:07:48,100 --> 00:07:51,300
Заметим, что нужные столбцы добавлены на экраны. 

104
00:07:54,700 --> 00:07:58,900
И определим длительность доклада по умолчанию - 1 час. 

105
00:07:58,900 --> 00:08:01,800
Для этого подпишемся на событие InitEntity 

106
00:08:05,566 --> 00:08:07,299
и пропишем значение в коде. 

107
00:08:12,233 --> 00:08:16,299
Теперь можем заняться генерацией скриптов и созданием базы данных. 

108
00:08:18,200 --> 00:08:25,366
Для генерации скриптов создания базы данных нужно выбрать меню CUBA - Generate Database Scripts. 

109
00:08:25,366 --> 00:08:31,099
Чтобы выполнить эти скрипты и создать базу, нажмите кнопку Create database. 

110
00:08:31,100 --> 00:08:36,066
Помимо таблиц приложения, CUBA создает системные таблицы для хранения 

111
00:08:36,066 --> 00:08:40,332
информации о пользователях, ролях, задачах и т.д. 

112
00:08:40,333 --> 00:08:44,066
Теперь мы можем запустить приложение локально из среды разработки. 

113
00:08:47,900 --> 00:08:51,033
Просто нажмите кнопку запуска в меню среды разработки. 

114
00:08:55,600 --> 00:09:00,166
В окне Run можно посмотреть лог приложения. 

115
00:09:00,166 --> 00:09:04,332
Через некоторое время можно будет открыть приложение в браузере. 

116
00:09:04,333 --> 00:09:08,999
Откройте ссылку, имя пользователя по умолчанию “admin”, пароль - “admin”. 

117
00:09:11,833 --> 00:09:15,799
Добавим тестовые данные: пару докладчиков и пару докладов. 

118
00:09:19,266 --> 00:09:22,399
Как видите, проверка формата электронной почты работает. 

119
00:09:27,766 --> 00:09:30,266
Добавим пару докладов на сегодня и завтра.

120
00:09:35,433 --> 00:09:39,333
Видим, что дата и время окончания доклада вычисляются автоматически.

121
00:09:57,800 --> 00:10:01,033
Сгенерированные экраны хороши для простых операций, 

122
00:10:01,033 --> 00:10:05,499
но в реальности пользовательский интерфейс обычно сложнее. 

123
00:10:05,500 --> 00:10:08,433
Давайте добавим календарь для отображения докладов. 

124
00:10:11,300 --> 00:10:14,633
Далее мы добавим лист с закладками на браузер, 

125
00:10:14,633 --> 00:10:20,333
добавим закладку с календарем и обеспечим выполнение операций с докладами с использованием календаря. 

126
00:10:23,433 --> 00:10:26,299
Поместим таблицу с докладами на лист с закладками, 

127
00:10:28,833 --> 00:10:31,533
добавим еще одну закладку 

128
00:10:31,533 --> 00:10:34,799
и поместим на нее календарь. 

129
00:10:34,800 --> 00:10:39,700
Развернем лист с закладками на весь экран. 

130
00:10:39,700 --> 00:10:42,133
Студия запрашивает id для элемента. 

131
00:10:42,133 --> 00:10:47,399
ID в CUBA нужны, чтобы потом элемент экрана можно было ссылаться в коде приложения. 

132
00:10:47,400 --> 00:10:50,233
Добавим ID и заголовок для каждой закладки. 

133
00:11:06,833 --> 00:11:11,233
Назначим календарю коллекцию данных и развернем на всю площадь закладки. 

134
00:11:13,633 --> 00:11:16,299
Наконец, развернем таблицу с докладами. 

135
00:11:16,300 --> 00:11:20,500
В CUBA компоненты экрана могут быть привязаны к сущностям и их полям. 

136
00:11:20,500 --> 00:11:24,266
Мы свяжем календарь с коллекцией данных, извлекаемых из базы. 

137
00:11:24,266 --> 00:11:28,632
Используем поле поиска и свяжем свойства:

138
00:11:28,633 --> 00:11:32,099
startDateProperty с датой начала доклада

139
00:11:32,100 --> 00:11:35,566
endDateProperty с датой окончания доклада

140
00:11:35,566 --> 00:11:38,132
captionProperty с темой доклада

141
00:11:38,133 --> 00:11:41,666
И descriptionProperty с описанием доклада

142
00:11:41,666 --> 00:11:44,466
В календаре будем показывать только рабочие часы. 

143
00:11:48,466 --> 00:11:51,632
Мы можем использовать не только визуальный редактор экрана, 

144
00:11:51,633 --> 00:11:53,466
но и редактор XML. 

145
00:11:53,466 --> 00:11:57,399
Покажем кнопки навигации в календаре. 

146
00:11:57,400 --> 00:12:01,233
Можно просто закрыть и открыть экран, чтобы увидеть изменения. 

147
00:12:01,233 --> 00:12:06,766
Платформа CUBA поддерживает перегрузку пользовательского интерфейса без остановки приложения. 

148
00:12:06,766 --> 00:12:10,632
Теперь мы видим календарь и доклады. 

149
00:12:10,633 --> 00:12:16,199
Давайте будем вызывать редактор доклада при выборе доклада на календаре. 

150
00:12:16,200 --> 00:12:20,533
Когда мы взаимодействуем с интерфейсом, генерируются специальные события. 

151
00:12:20,533 --> 00:12:24,999
Можно подписаться на эти события и реагировать на происходящее. 

152
00:12:25,000 --> 00:12:28,933
Давайте подпишемся на клик мыши по докладу в календаре.

153
00:12:28,933 --> 00:12:30,533
Нам нужно вызвать редактор.  

154
00:12:30,533 --> 00:12:35,699
Будем использовать фасет, который  дает возможность предварительной настройки экрана редактора.

155
00:12:37,800 --> 00:12:40,433
Перетащим фасет на дерево компонентов 

156
00:12:43,866 --> 00:12:45,866
и определим свойства: 

157
00:12:45,866 --> 00:12:49,799
ID 

158
00:12:49,800 --> 00:12:51,766
Нам нужен редактор докладов. 

159
00:12:51,766 --> 00:12:55,699
Выберем соответствующий класс и контейнер данных. 

160
00:12:55,700 --> 00:12:58,333
Класс экрана - SessionEdit 

161
00:12:58,333 --> 00:13:01,999
Открывать редактор будем в виде диалогового окна. 

162
00:13:02,000 --> 00:13:04,833
Установим режим редактирования для экрана. 

163
00:13:04,833 --> 00:13:07,966
Вернемся в контроллер и добавим фасет. 

164
00:13:07,966 --> 00:13:15,866
В редакторе мы будем использовать доклад, который пользователь выбирает щелчком мыши. 

165
00:13:15,866 --> 00:13:18,799
После этого показываем экран редактора. 

166
00:13:18,800 --> 00:13:22,566
Переоткроем браузер и посмотрим на то, что получилось. 

167
00:13:22,566 --> 00:13:25,799
Как видите, нужно немного исправить размеры редактора. 

168
00:13:25,800 --> 00:13:30,966
Изменим высоту и ширину окна. 

169
00:13:30,966 --> 00:13:33,932
Самый простой способ - установить значения авто.

170
00:13:39,600 --> 00:13:44,633
Открываем экран заново, 

171
00:13:44,633 --> 00:13:46,399
и видим, что его размеры изменились.

172
00:13:47,500 --> 00:13:51,233
А теперь давайте добавим бизнес-логику в наше приложение. 

173
00:13:51,233 --> 00:13:55,999
Мы создадим сервис, который реализует бизнес-логику, и используем его в экране. 

174
00:13:56,000 --> 00:13:58,966
Это будет сервис для изменения расписания докладов, 

175
00:13:58,966 --> 00:14:02,832
который будет проверять, что у докладчика в день не более двух докладов. 

176
00:14:05,633 --> 00:14:10,466
Правой кнопкой мыши щелкнем на узле “Сервисы” в дереве CUBA проекта 

177
00:14:10,466 --> 00:14:16,032
и создадим интерфейс SessionService и реализацию SessionServiceBean. 

178
00:14:16,033 --> 00:14:19,533
Метод сервиса будет принимать доклад и новое время начала, 

179
00:14:19,533 --> 00:14:22,533
а результатом выполнения будет измененный доклад.  

180
00:14:27,700 --> 00:14:32,900
Сначала вычислим время начала и окончания доклада в день, когда запланирован доклад. 

181
00:14:43,866 --> 00:14:47,932
Для доступа к данным будем использовать класс DataManager. 

182
00:14:47,933 --> 00:14:51,466
Добавим его в сервис и используем в методе. 

183
00:14:51,466 --> 00:14:54,399
Создадим запрос к базе данных, который проверит, 

184
00:14:54,400 --> 00:14:59,400
что для заданного докладчика не запланировано других докладов в заданном промежутке времени 

185
00:14:59,400 --> 00:15:01,600
и передадим в него параметры метода. 

186
00:15:08,333 --> 00:15:12,799
Затем проверим результат выполнения запроса и, в зависимости от него, 

187
00:15:12,800 --> 00:15:18,733
или обновим доклад, присвоив новую дату начала, или вернем исходный доклад. 

188
00:15:18,733 --> 00:15:22,433
Сервис готов, давайте добавим его в браузер докладов. 

189
00:15:22,433 --> 00:15:26,499
Будем его вызывать при перетаскивании доклада в календаре. 

190
00:15:26,500 --> 00:15:29,666
В методе-обработчике события календаря добавим код, 

191
00:15:29,666 --> 00:15:35,466
чтобы извлечь доклад из сгенерированного события и вызовем сервис для переноса доклада. 

192
00:15:41,800 --> 00:15:44,966
Поcле этого просто обновим доклад в коллекции данных. 

193
00:15:44,966 --> 00:15:51,432
Чтобы запустить сервис, нужно перезапустить приложение. 

194
00:15:56,200 --> 00:16:00,200
После перезапуска открываем календарь докладов и - вуаля! 

195
00:16:00,200 --> 00:16:04,433
Теперь можем переносить доклады при помощи мыши прямо в календаре. 

196
00:16:04,433 --> 00:16:09,433
Проверим, как это работает, для этого добавим два доклада для одного докладчика на один день 

197
00:16:09,433 --> 00:16:13,966
и убедимся, что не сможем назначить ему дополнительный доклад на этот день. 

198
00:16:28,833 --> 00:16:32,799
В этом разделе мы изменим стандартные надписи на экранах приложения. 

199
00:16:35,466 --> 00:16:40,899
В CUBA можно обновлять ресурсы приложения, меняя тем самым текст на стандартных экранах. 

200
00:16:40,900 --> 00:16:47,466
Давайте поменяем надписи, чтобы они соответствовали назначению нашего приложения - управление докладами. 

201
00:16:47,466 --> 00:16:50,232
Поскольку CUBA может перегружать экраны на ходу, 

202
00:16:50,233 --> 00:16:53,833
просто выйдем из приложения и зайдем в него и увидим, 

203
00:16:53,833 --> 00:16:56,066
что стандартные надписи поменялись. 

204
00:16:58,833 --> 00:17:02,599
Вместе с фреймворком CUBA предоставляется каталог дополнений, 

205
00:17:02,600 --> 00:17:06,300
в котором есть довольно много модулей для разных полезных вещей, 

206
00:17:06,300 --> 00:17:10,000
вроде поддержки картографии, отчетности или рисования графиков. 

207
00:17:10,000 --> 00:17:12,800
Эти компоненты можно легко добавить в приложение.

208
00:17:12,800 --> 00:17:15,133
Давайте добавим компонент Helium. 

209
00:17:15,133 --> 00:17:19,433
Это новая визуальная тема, которую можно использовать вместо стандартных тем. 

210
00:17:19,433 --> 00:17:22,633
Нажимаем Install и применяем изменения. 

211
00:17:22,633 --> 00:17:26,399
Теперь нужно остановить приложение и выполнить скрипты компонента. 

212
00:17:29,566 --> 00:17:30,766
Запустим проект 

213
00:17:34,466 --> 00:17:37,399
и перейдем к настройкам. 

214
00:17:37,400 --> 00:17:39,366
Добавленная тема появилась в списке. 

215
00:17:39,366 --> 00:17:44,499
Выберем ее, сохраним изменения и перелогинимся. 

216
00:17:44,500 --> 00:17:47,800
Тема уже применилась. 

217
00:17:47,800 --> 00:17:52,800
В окне настроек темы можно предварительно посмотреть, как будут выглядеть изменения. 

218
00:17:58,066 --> 00:18:01,599
Платформа CUBA предоставляет большое количество функциональности, 

219
00:18:01,600 --> 00:18:06,266
чтобы помочь вам сделать бизнес-приложения быстро и качественно. 

220
00:18:06,266 --> 00:18:09,732
В этом видео мы рассмотрели только базовые вещи. 

221
00:18:09,733 --> 00:18:15,799
На нашем сайте cuba-platform.ru можно найти намного больше примеров и учебников, которые помогут вам глубже освоить возможности CUBA. Спасибо за внимание!

222
00:18:15,800 --> 00:18:19,466
которые помогут вам глубже освоить возможности CUBA. Спасибо за внимание!

223
00:18:20,800 --> 00:18:22,366
Спасибо за внимание!

