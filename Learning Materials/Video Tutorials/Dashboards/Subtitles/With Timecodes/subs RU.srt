1
00:00:00,266 --> 00:00:05,499
Всем привет! Cегодня я покажу вам, как создавать дашборды в CUBA-приложениях.

2
00:00:05,500 --> 00:00:09,033
Дашборд - это отличный способ визуализации информации

3
00:00:09,033 --> 00:00:13,066
но часто Java-разработчики
сталкиваются с проблемами при добавлении дашбордов,

4
00:00:13,066 --> 00:00:17,099
например, из-за ресурсоемкой и затрудненной реализации

5
00:00:17,100 --> 00:00:20,266
или отсутствия front-end разработчика в команде.

6
00:00:20,266 --> 00:00:23,366
Мы хотим показать вам простой способ представления визуальной информации

7
00:00:23,366 --> 00:00:26,932
с помощью open source-дополнения Dashboards.

8
00:00:26,933 --> 00:00:34,266
Оно доступно в Каталоге дополнений и на GitHub’е.

9
00:00:34,266 --> 00:00:38,566
Любой дашборд состоит из виджетов - отдельных визуальных элементов интерфейса.

10
00:00:38,566 --> 00:00:41,332
Разместить виджеты на дашборде в нужном порядке

11
00:00:41,333 --> 00:00:44,799
можно с помощью широкого набора компоновок - лейаутов.

12
00:00:44,800 --> 00:00:49,600
Например, адаптивный лейаут подстроит дашборд для отображения на компьютере,

13
00:00:49,600 --> 00:00:50,966
планшете или смартфоне.

14
00:00:50,966 --> 00:00:56,299
Также можно настроить обновление данных на дашборде и взаимодействие между виджетами.

15
00:00:56,300 --> 00:01:01,366
А сейчас я покажу вам, как создать и настроить дашборд всего за 15 минут.

16
00:01:01,366 --> 00:01:04,666
Возможно, вы уже знакомы с нашим демопроектом Petclinic,

17
00:01:04,666 --> 00:01:06,899
который можно найти на сайте платформы CUBA.

18
00:01:06,900 --> 00:01:11,500
Он демонстрирует IT-систему воображаемой ветеринарной клиники для покемонов

19
00:01:11,500 --> 00:01:15,733
и уже содержит данные о клиентах, питомцах, ветеринарах и приемах.

20
00:01:15,733 --> 00:01:18,533
Будем использовать это приложение в качестве основы

21
00:01:18,533 --> 00:01:21,233
и добавим в него несколько виджетов и дашбордов.

22
00:01:21,233 --> 00:01:24,199
Сначала посмотрим на его доменную модель.

23
00:01:24,200 --> 00:01:27,466
Сущность Owner содержит данные о владельцах питомцев.

24
00:01:27,466 --> 00:01:33,999
Pet содержит имя, дату рождения и связана с классами Owner и PetType.

25
00:01:34,000 --> 00:01:39,266
Информация о приеме находится в классе Visit и относится к одному питомцу.

26
00:01:39,266 --> 00:01:45,832
Сущность Vet  отображает имена ветеринаров, расширяет класс Person  и связана с классом Specialty.

27
00:01:45,833 --> 00:01:48,399


28
00:01:48,400 --> 00:01:49,933
Теперь мы готовы начать.

29
00:01:49,933 --> 00:01:52,633
Зайдем в репозиторий Pet Clinic на github.

30
00:01:52,633 --> 00:01:58,166
Скопируем его и откроем проект в CUBA studio.

31
00:01:58,166 --> 00:02:01,266


32
00:02:01,266 --> 00:02:05,599
Теперь добавим в проект дополнение для дашбордов.

33
00:02:05,600 --> 00:02:10,066
Откроем окно Add-ons и перейдем в Marketplace.

34
00:02:10,066 --> 00:02:13,332
Найдем дополнение Dashboards.

35
00:02:13,333 --> 00:02:16,066
Нажмем Install и применим изменения.

36
00:02:16,066 --> 00:02:20,066


37
00:02:20,066 --> 00:02:26,599
Видим, что зависимости дополнения добавлены в файл build.gradle

38
00:02:26,600 --> 00:02:33,066
и web.xml в core и web модулях.

39
00:02:33,066 --> 00:02:35,666


40
00:02:35,666 --> 00:02:38,632
Теперь запустим приложение.

41
00:02:38,633 --> 00:02:42,166
Применим скрипты создания базы данных и перейдем по ссылке

42
00:02:42,166 --> 00:02:44,766
чтобы открыть приложение.

43
00:02:44,766 --> 00:02:47,266
Залогинимся в роли администратора.

44
00:02:47,266 --> 00:02:52,366
Видим, что в главном меню появился еще один основной раздел - Dashboards.

45
00:02:52,366 --> 00:02:55,432
Давайте создадим дашборд с именем Main Dashboard.

46
00:02:55,433 --> 00:02:58,799


47
00:02:58,800 --> 00:03:02,600
Сейчас мы можем добавить лейаут, но у нас пока нет ни одного виджета,

48
00:03:02,600 --> 00:03:04,566
доступного для добавления.

49
00:03:04,566 --> 00:03:07,032
Давайте создадим несколько виджетов.

50
00:03:07,033 --> 00:03:09,733
Для начала добавим совсем простой виджет.

51
00:03:09,733 --> 00:03:13,199
Он будет показывать изображение Пикачу, скачанное из Википедии.

52
00:03:13,200 --> 00:03:17,533


53
00:03:17,533 --> 00:03:22,166
Чтобы создать новый виджет, сначала нужно создать новый фрагмент экрана.

54
00:03:22,166 --> 00:03:25,332
Поместим его в пакет widgets

55
00:03:25,333 --> 00:03:27,999
и назовем pokemon-art-widget.

56
00:03:28,000 --> 00:03:32,000


57
00:03:32,000 --> 00:03:38,333
Затем добавим подкаталог “images” в  modules/web/

58
00:03:38,333 --> 00:03:42,633
и поместим туда загруженное изображение.

59
00:03:42,633 --> 00:03:48,233
Также обновим задачу deploy в build.gradle, чтобы использовать картинку в приложении.

60
00:03:48,233 --> 00:03:53,166


61
00:03:53,166 --> 00:04:05,899
Окей, следующим шагом поместим картинку на наш фрагмент экрана с помощью опции загрузки relativePath.

62
00:04:05,900 --> 00:04:07,600
Ну а теперь - магия!

63
00:04:07,600 --> 00:04:12,700
Добавим аннотацию @DashboardWidget в наш фрагмент экрана и передадим ему имя виджета,

64
00:04:12,700 --> 00:04:16,533
которое будет использовать редактор дашборда.

65
00:04:16,533 --> 00:04:19,366
Отлично! Наш первый виджет готов.

66
00:04:19,366 --> 00:04:22,232
Запустим приложение и посмотрим, что оно умеет!

67
00:04:22,233 --> 00:04:24,333


68
00:04:24,333 --> 00:04:28,833
Открываем дашборд в редакторе и - вуаля! -

69
00:04:28,833 --> 00:04:31,633
наш новенький виджет уже здесь!

70
00:04:31,633 --> 00:04:33,399
Теперь оформим наш дашборд.

71
00:04:33,400 --> 00:04:38,666
Добавим адаптивный лейаут в качестве корневого элемента.

72
00:04:38,666 --> 00:04:41,599
Настройки оставим по умолчанию.

73
00:04:41,600 --> 00:04:44,600
Добавим сюда наш виджет Pokemon Art.

74
00:04:44,600 --> 00:04:49,200
Сделаем к нему подпись и установим id, соответствующий названию.

75
00:04:49,200 --> 00:04:53,033
Сделаем подпись отображаемой.

76
00:04:53,033 --> 00:04:58,999
В настройках стиля установим ширину и высоту виджета - авто.

77
00:04:59,000 --> 00:05:01,133
Сохраним изменения.

78
00:05:01,133 --> 00:05:07,633
Теперь самое время поговорить о встроенных возможностях редактирования виджетов.

79
00:05:07,633 --> 00:05:13,233
Можно настроить подпись к виджету (что особенно важно, если стоит галочка “Show widget Caption” -

80
00:05:13,233 --> 00:05:15,266
отображать подпись к виджету).

81
00:05:15,266 --> 00:05:20,266
И “Widget Id”, что будет полезно если вы просматриваете записи в формате JSON,

82
00:05:20,266 --> 00:05:25,299
отображающие структуру дашборда, в базе данных или JSON-файле.

83
00:05:25,300 --> 00:05:30,033
Параметры виджета - это набор дополнительных значений, передаваемых виджету,

84
00:05:30,033 --> 00:05:33,199
которые в дальнейшем сможет редактировать пользователь.

85
00:05:33,200 --> 00:05:35,600
Мы поговорим о них позже.

86
00:05:35,600 --> 00:05:39,300
Редактор шаблонов виджетов позволяет сохранять настроенный виджет,

87
00:05:39,300 --> 00:05:43,266
то есть виджет с заранее заданными параметрами, в качестве шаблона для

88
00:05:43,266 --> 00:05:45,932
дальнейшего использования в других дашбордах.

89
00:05:45,933 --> 00:05:51,833
Окно адаптивных настроек используется для установки соотношения ширины виджетов в лейауте.

90
00:05:51,833 --> 00:05:54,599
И последнее окно - настройки стиля.

91
00:05:54,600 --> 00:06:01,500
Здесь можно определить стиль css для контейнера виджета и настроить его ширину и высоту.

92
00:06:01,500 --> 00:06:06,200
Окей, теперь мы знаем, как сделать простейший статичный виджет.

93
00:06:06,200 --> 00:06:09,433
Но что, если нам нужно, чтобы виджет регулярно обновлялся?

94
00:06:09,433 --> 00:06:12,933
Например, мы хотим видеть рандомную шутку из интернета на дашборде,

95
00:06:12,933 --> 00:06:16,433
и чтобы она обновлялась каждые 15 секунд.

96
00:06:16,433 --> 00:06:21,933
Хорошо, давайте выполним такую задачу, а заодно посмотрим на некоторые другие

97
00:06:21,933 --> 00:06:24,633
инструменты, предоставляемые дополнением Dashboards.

98
00:06:24,633 --> 00:06:29,333
Создадим виджет, как мы делали до этого,

99
00:06:29,333 --> 00:06:32,966
и назовем его random-joke-widget.

100
00:06:32,966 --> 00:06:37,799
Добавим область textArea для шутки в xml-дескриптор

101
00:06:37,800 --> 00:06:46,633
и пропишем соответствующие атрибуты.

102
00:06:46,633 --> 00:06:54,133
Добавим аннотацию @DashboardWidget.

103
00:06:54,133 --> 00:07:00,766
Инжектируем textArea в класс-контроллер.

104
00:07:00,766 --> 00:07:05,366
Пусть контроллер виджета реализует интерфейс RefreshableWidget.

105
00:07:05,366 --> 00:07:09,099
Это интерфейс-маркер, который сообщает дополнению, что оно должно

106
00:07:09,100 --> 00:07:13,466
периодически вызывать метод refresh этого виджета.

107
00:07:13,466 --> 00:07:19,666
Окей, переопределим этот метод.

108
00:07:19,666 --> 00:07:29,766
И вызовем (пока пустой) метод с отображением новой шутки.

109
00:07:29,766 --> 00:07:31,999
Но как увидеть первую шутку?

110
00:07:32,000 --> 00:07:35,633
Как нам инициализировать виджет?

111
00:07:35,633 --> 00:07:40,699
В отличие от обычных экранов, аннотация @LoadDataBeforeShow не работает для виджетов дашборда.

112
00:07:40,700 --> 00:07:46,666
Как и обработка события Screen.BeforeShowEvent для него самого и для родительского экрана.

113
00:07:46,666 --> 00:07:54,432
Чтобы инициализировать виджет, нам нужно подписаться на InitEvent или AfterInitEvent.

114
00:07:54,433 --> 00:07:58,366
В нашем случае используем AfterInitEvent.

115
00:07:58,366 --> 00:08:03,532
Подпишемся на это событие и инициализируем в нем textArea.

116
00:08:03,533 --> 00:08:07,933
Теперь нам нужно получить саму шутку.

117
00:08:07,933 --> 00:08:13,166
Используем сайт icanhazdadjoke.com для получения шуток.

118
00:08:13,166 --> 00:08:16,299
Документация находится здесь.

119
00:08:16,300 --> 00:09:25,633
Для выполнения задачи мы будем использовать класс RestTemplate из пакета org.springframework.web.client.

120
00:09:25,633 --> 00:09:29,233
Окей. Наш виджет с рандомными шутками, похоже, готов.

121
00:09:29,233 --> 00:09:33,799
Протестируем его.

122
00:09:33,800 --> 00:09:39,066
Добавим виджет на дашборд.

123
00:09:39,066 --> 00:09:42,966
Установим ширину и высоту.

124
00:09:42,966 --> 00:09:47,166
Работает! Но как установить период обновления?

125
00:09:47,166 --> 00:09:52,566
У нас есть поле под названием Refresh period, установим в нем период в 15 секунд.

126
00:09:52,566 --> 00:09:56,332
Этот метод обновления не вызывается в режиме редактирования дашборда.

127
00:09:56,333 --> 00:10:18,933
Чтобы обновления отображались, сохраним изменения и перейдем в режим просмотра дашборда.

128
00:10:18,933 --> 00:10:22,333
Видим, что шутки обновляются каждые 15 секунд.

129
00:10:22,333 --> 00:10:25,066
Окей, этого хватит для создания простых виджетов,

130
00:10:25,066 --> 00:10:30,099
теперь создадим виджет, который будет работать с данными из базы данных.

131
00:10:30,100 --> 00:10:34,966
Виджет будет показывать календарь с отмеченными приемами в выбранном месяце.

132
00:10:34,966 --> 00:10:39,332
Добавим новый фрагмент экрана

133
00:10:39,333 --> 00:10:43,699
и назовем его visits-calendar-widget.

134
00:10:43,700 --> 00:10:48,333
Добавим аннотацию @DashboardWidget.

135
00:10:48,333 --> 00:10:53,699
Нам нужно работать с данными, поэтому добавим collectionContainer.

136
00:10:53,700 --> 00:11:01,066
Зададим ID   - visitsDс, класс - Visit, представление - “visit-with-pet”.

137
00:11:01,066 --> 00:11:04,032
Добавим загрузчик данных - dataLoader.

138
00:11:04,033 --> 00:11:07,766
Затем добавим vbox и Label,

139
00:11:07,766 --> 00:11:31,066
datePicker для выбора отображаемого месяца и календарь в XML-дескриптор нашего фрагмента экрана.

140
00:11:31,066 --> 00:11:34,066
Теперь пора обновить класс-контроллер.

141
00:11:34,066 --> 00:11:45,732
Перейдем в виджет VisitsCalendarWidget и инжектируем наш dataLoader, DataContainer и Календарь.

142
00:11:45,733 --> 00:11:52,966
Как вы помните, виджеты не могут загружать данные сами и аннотация @LoadDataBeforeShow с ними не работает.

143
00:11:52,966 --> 00:11:58,932
Поэтому нужно подписаться на событие onAfterInit и загружать данные туда.

144
00:11:58,933 --> 00:12:02,399
Для этого будем вызывать метод load().

145
00:12:02,400 --> 00:12:14,333
После этого также добавим приемы (Visits) в контроллер календаря в Java-коде.

146
00:12:14,333 --> 00:12:17,266
Также нам нужно обработать событие ValueChange,

147
00:12:17,266 --> 00:12:29,999
где мы установим начальную (startDate) и конечную (endDate)  даты календаря.

148
00:12:30,000 --> 00:12:35,766
Теперь запустим приложение.

149
00:12:35,766 --> 00:12:39,366
Добавим “Visits Calendar” на наш тестовый дашборд

150
00:12:39,366 --> 00:12:47,966
и отрегулируем его размер.

151
00:12:47,966 --> 00:12:54,899
Можем убедиться, что наш виджет работает корректно.

152
00:12:54,900 --> 00:12:58,833
Ранее мы отметили, что дополнение предоставляет редактор параметров,

153
00:12:58,833 --> 00:13:02,233
позволяющий создавать и передавать параметры виджету.

154
00:13:02,233 --> 00:13:06,966
Давайте посмотрим, как можно использовать эти параметры в нашем виджете.

155
00:13:06,966 --> 00:13:11,232
Предположим, мы хотим добавлять изображение покемона на дашборд.

156
00:13:11,233 --> 00:13:14,899
В этом демо мы будем брать картинки из ресурсов, однако, в

157
00:13:14,900 --> 00:13:22,833
реальном приложении эти изображения следует хранить в сущности Pet в поле с типом Файл.

158
00:13:22,833 --> 00:13:26,933
Добавим сначала собственный параметр для виджета Pokemon Art.

159
00:13:26,933 --> 00:13:29,899
Установим Value type - Entity,

160
00:13:29,900 --> 00:13:33,400
класс сущности - petclinic_Pet,

161
00:13:33,400 --> 00:13:38,300
алиас - pet, будем использовать алиас  для получения параметра в контроллере.

162
00:13:38,300 --> 00:13:41,066
Зададим для параметра произвольное имя.

163
00:13:41,066 --> 00:13:45,299
Выберем экземпляр сущности и представление.

164
00:13:45,300 --> 00:13:48,966
Окей, теперь наш виджет может получать параметр.

165
00:13:48,966 --> 00:13:52,066
Посмотрим, как мы можем его использовать.

166
00:13:52,066 --> 00:14:01,566
Поместим изображения в папку, в которой лежит картинка с Пикачу.

167
00:14:01,566 --> 00:14:04,566
Теперь нам нужно создать поле класса с типом Pet, с

168
00:14:04,566 --> 00:14:09,966
таким же именем, каким мы ранее назвали алиас.

169
00:14:09,966 --> 00:14:14,699
Добавим аннотации  @WindowParam и @WidgetParam.

170
00:14:14,700 --> 00:14:23,566
Также инжектируем сам виджет, чтобы к нему тоже можно было добавить подпись.

171
00:14:23,566 --> 00:14:33,166
Ссылка на сущность Widget, которая технически является контейнером фрагмента экрана, передается как window param в контроллер фрагмента экрана.

172
00:14:33,166 --> 00:14:38,832
Доступ к сущностям Dashboard и DashboardFrame можно получить таким же способом.

173
00:14:38,833 --> 00:14:46,266
Также нам нужно добавить компонент для изображений в наш контроллер через аннотацию @Inject.

174
00:14:46,266 --> 00:14:53,066
Осталось только немного доработать обработчик события onInit. Опять же, реализация довольно примитивна и не будет

175
00:14:53,066 --> 00:14:58,966
работать, если имя объекта Pet не совпадает с именем ресурса, или используется для

176
00:14:58,966 --> 00:15:01,932
загрузки неавторизованных ресурсов из папок.

177
00:15:01,933 --> 00:15:15,033
Но она вполне подходит для демонстрации того, как передать параметры в виджеты.

178
00:15:15,033 --> 00:15:27,366
Проверим, как все работает.

179
00:15:27,366 --> 00:15:33,466
Мы видим, что картинка изменилась на покемона, установленного в параметрах.

180
00:15:33,466 --> 00:15:38,799
Думаю, вы заметили, что интерфейс настройки параметров виджетов не слишком удобный.

181
00:15:38,800 --> 00:15:41,900
В конце концов, откуда обычный пользователь может знать,

182
00:15:41,900 --> 00:15:47,200
какая сущность или список сущностей или перечисление нужно использовать в качестве параметра,

183
00:15:47,200 --> 00:15:50,466
и каковы допустимые значения для них?

184
00:15:50,466 --> 00:15:54,266
Давайте это исправим, а заодно и проблему с безопасностью и валидацией параметров,

185
00:15:54,266 --> 00:15:56,932
о которой мы говорили ранее.

186
00:15:56,933 --> 00:16:02,066
Это можно сделать с помощью настраиваемого редактора виджетов.

187
00:16:02,066 --> 00:16:07,266
Он предоставит лучший контроль передаваемых параметров, их валидации, а также даст конечному пользователю более

188
00:16:07,266 --> 00:16:11,099
удобный и дружелюбный интерфейс для настройки виджета.

189
00:16:11,100 --> 00:16:17,433
Создадим пустой фрагмент экрана

190
00:16:17,433 --> 00:16:21,566
и назовем его pokemon-art-widget-editor.

191
00:16:21,566 --> 00:16:26,266
Нужно убедиться, что он не назначен на какой-нибудь элемент веб-меню.

192
00:16:26,266 --> 00:16:30,666
Затем нам нужно добавить новое поле lookupField в лэйаут.

193
00:16:30,666 --> 00:16:33,199
Мы используем этот компонент для выбора картинки,

194
00:16:33,200 --> 00:16:36,266
которая будет отображаться в виджете.

195
00:16:36,266 --> 00:16:38,866
Уберем возможность установки пустого значения,

196
00:16:38,866 --> 00:16:42,866
чтобы пользователю приходилось выбирать картинку для отображения.

197
00:16:42,866 --> 00:16:45,099
А также, если вы не сделали этого  ранее,

198
00:16:45,100 --> 00:16:58,366
добавьте message pack в пакет.

199
00:16:58,366 --> 00:17:05,532
Теперь перейдем в контроллер экрана и инжектируем LookupField,

200
00:17:05,533 --> 00:17:20,066
petName и petArtResource, добавим аннотации @WindowParam and @WidgetParam.

201
00:17:20,066 --> 00:17:35,466
Добавим несколько констант.

202
00:17:35,466 --> 00:18:11,766
Подпишемся на событие Init.

203
00:18:11,766 --> 00:18:24,666
Обработаем ValueChangeEvent.

204
00:18:24,666 --> 00:19:14,366
И реализуем метод listArtFiles.

205
00:19:14,366 --> 00:19:17,032
Теперь переключимся на PokemonArtWidget,

206
00:19:17,033 --> 00:19:21,466
откроем его класс-контроллер и укажем редактор виджета.

207
00:19:21,466 --> 00:19:29,466
Заменим инжектированный параметр сущности pet двумя новыми строковыми параметрами  - petName и petArtResource.

208
00:19:29,466 --> 00:19:36,966
Добавим аннотации @WindowParam и @WidgetParam и получим имя и ресурс с файлом из этих полей,

209
00:19:36,966 --> 00:19:44,166
если у них не нулевое значение.

210
00:19:44,166 --> 00:19:50,666
Теперь осталось только переписать метод onInit

211
00:19:50,666 --> 00:20:07,566
и добавить метод setPet.

212
00:20:07,566 --> 00:20:10,199
Взглянем на обновленный редактор виджетов.

213
00:20:10,200 --> 00:20:17,400
Настройка виджетов стала удобнее.

214
00:20:17,400 --> 00:20:21,000
Добавить дашборд на экран довольно просто.

215
00:20:21,000 --> 00:20:24,900
Обычно дашборд размещают в приложении на главном экране.

216
00:20:24,900 --> 00:20:28,833
Посмотрим, как это сделать для приложения нашей ветеринарной клиники.

217
00:20:28,833 --> 00:20:34,366
Откроем окно дескриптора главного экрана - ext-mainwindow.xml.

218
00:20:34,366 --> 00:20:47,432
Прежде всего, нам нужно добавить пространство имен dashboards.

219
00:20:47,433 --> 00:20:51,133
Затем найти тег <main:workarea/>, который представляет область экрана,

220
00:20:51,133 --> 00:20:58,999
где приложение открывает экраны - там мы и будем размещать наш ранее созданный дашборд.

221
00:20:59,000 --> 00:21:02,733
Сначала нужно немного изменить лейаут рабочей области:

222
00:21:02,733 --> 00:21:07,399
добавить vBox, чтобы сообщить экрану, как разместить уже имеющуюся картинку

223
00:21:07,400 --> 00:21:10,666
и добавляемый дашборд.

224
00:21:10,666 --> 00:21:18,232
Затем добавим тег <dashboard:dashboard>, зададим ему ID и в атрибут кода передадим код созданного дашборда.

225
00:21:18,233 --> 00:21:22,499
В нашем случае это  “main-dashboard”.

226
00:21:22,500 --> 00:21:28,733
Параметр timer delay  играет ту же роль, что и refresh period  в редакторе дашборда,

227
00:21:28,733 --> 00:21:32,266
и переопределяет его, если прописаны оба.

228
00:21:32,266 --> 00:21:45,799
Теперь, когда настройка закончена, настало время запустить приложение и посмотреть на обновленный главный экран.

229
00:21:45,800 --> 00:21:48,066
Все работает как и задумано.

230
00:21:48,066 --> 00:21:51,399
Теперь на главном экране отображается дашборд.

231
00:21:51,400 --> 00:21:55,466
Теперь поговорим о параметрах дашборда.

232
00:21:55,466 --> 00:22:02,799
Эти параметры можно передать в дашборд либо с помощью тега <dashboard:parameter> в компоненте <dashboard::dashboard>,

233
00:22:02,800 --> 00:22:07,833
либо установив их в редакторе дашборда.

234
00:22:07,833 --> 00:22:11,699
Создадим параметр для главного дашборда в редакторе и установим

235
00:22:11,700 --> 00:22:21,333
алиас font-size (имя может быть любым) тип параметра STRING, а значение - huge.

236
00:22:21,333 --> 00:22:24,333
Этот параметр будет передан всем виджетам дашборда,

237
00:22:24,333 --> 00:22:30,233
так что мы можем инжектировать его в наши виджеты с помощью аннотаций @WindowParam и @WidgetParam

238
00:22:30,233 --> 00:22:33,299
и использовать, как нам надо.

239
00:22:33,300 --> 00:22:40,233
Параметр инжектирован, как мы видели ранее, и используется в методе  onAfterInit.

240
00:22:40,233 --> 00:22:45,299
Посмотрим на результат. Размер шрифта в виджете изменился.

241
00:22:45,300 --> 00:22:51,433
DashboardViewAssistant - это вспомогательный компонент, который используется для управления дашбордом.

242
00:22:51,433 --> 00:22:54,566
Это Spring-бин с областью видимости “prototype”,

243
00:22:54,566 --> 00:22:58,799
который получает управляемый экземпляр дашборда в свой метод init.

244
00:22:58,800 --> 00:23:04,066
В Dashboard Assistant удобно работать с бизнес-логикой дашбордов и виджетов.

245
00:23:04,066 --> 00:23:09,466
Так как пользователь может выбирать, какой assistant-бин привязать к  дашборду в пользовательском интерфейсе,

246
00:23:09,466 --> 00:23:16,766
assistant-бин очень полезен, если нужно, чтобы у пользователей была возможно включать и выключать часть бизнес-логики,

247
00:23:16,766 --> 00:23:21,832
или чтобы пользователь мог выбрать из заданных провайдеров бизнес-логики.

248
00:23:21,833 --> 00:23:24,966
Создадим такой assistant bean.

249
00:23:24,966 --> 00:23:29,699
Сначала создадим пакет с именем assistant

250
00:23:29,700 --> 00:23:34,000
и класс VisitScheduleAssistant.

251
00:23:34,000 --> 00:23:40,133
Отметим его как компонент Spring с областью видимости “prototype”

252
00:23:40,133 --> 00:23:44,266
и укажем , что он реализует интерфейс DashboardViewAssistant.

253
00:23:44,266 --> 00:23:47,432
Теперь переопределим метод init.

254
00:23:47,433 --> 00:23:53,333
Это довольно просто, достаточно сохранить объект дашборда для дальнейшего использования.

255
00:23:53,333 --> 00:23:58,499
Окей, теперь наш помощник дашборда готов, но ничего не делает.

256
00:23:58,500 --> 00:24:01,500
Так что пора прописать его бизнес-логику.

257
00:24:01,500 --> 00:24:06,966
Здесь мы используем стандартный механизм событий Spring и подпишемся на DashboardUpdatedEvent - событие,

258
00:24:06,966 --> 00:24:14,432
которое дополнение посылает каждый раз, когда нужно обновить дашборд.

259
00:24:14,433 --> 00:24:18,366
Сначала нужно проверить ID виджета с календарем приемов.

260
00:24:18,366 --> 00:24:27,632
Это “visits-calendar”.
Теперь возьмем этот виджет из дашборда и вызовем для него метод reloadSchedule.

261
00:24:27,633 --> 00:24:32,099
Реализуем этот метод в VisitsCalendarWidget.

262
00:24:32,100 --> 00:24:38,133
Проведем рефакторинг и извлечем логику загрузки данных из метода onAfterInit.

263
00:24:38,133 --> 00:24:43,533
А затем улучшим ее с помощью загрузки посещений только для выбранного месяца.

264
00:24:43,533 --> 00:24:49,366
Для этого добавим общее условие к объявлению загрузчика данных в XML файле с двумя параметрами:

265
00:24:49,366 --> 00:24:57,366
start date (дата начала) и end date (дата окончания).

266
00:24:57,366 --> 00:25:06,499
Установим эти параметры для начальной и конечной даты календаря перед вызовом метода load().

267
00:25:06,500 --> 00:25:12,966
Перезагрузим расписание для выбранного месяца в обработчике событий MonthPickerValueChange.

268
00:25:12,966 --> 00:25:16,132
Наш dashboard assistant готов,

269
00:25:16,133 --> 00:25:22,833
запустим приложение и проверим, как он работает.

270
00:25:22,833 --> 00:25:25,299
Откроем главный дашборд в редакторе,

271
00:25:25,300 --> 00:25:31,366
установим период обновления 30 секунд, и выберем assistant-бин, который только что создали.

272
00:25:31,366 --> 00:25:34,432
Сохраним изменения.

273
00:25:34,433 --> 00:25:36,499
Посмотрим на календарь в главном окне.

274
00:25:36,500 --> 00:25:44,866
Создадим новый прием в месяце, выбранном на календаре.

275
00:25:44,866 --> 00:25:50,366
Через некоторое время вы увидим, что новый прием появился на календаре.

276
00:25:50,366 --> 00:25:55,599
И в завершении поговорим об импорте и экспорте JSON-файлов.

277
00:25:55,600 --> 00:26:07,666
Создадим новый дашборд и добавим в него виджет с изображением покемона.

278
00:26:07,666 --> 00:26:10,666
Внизу экрана есть две кнопки.

279
00:26:10,666 --> 00:26:14,299
Экспортируем этот дашборд в файл JSON.

280
00:26:14,300 --> 00:26:22,133
Теперь можно использовать его в другом проекте или в этом же, создав новый дашборд и кликнув Import JSON.

281
00:26:22,133 --> 00:26:26,966
А теперь я покажу вам еще один способ добавления дашборда на главный экран.

282
00:26:26,966 --> 00:26:36,466
Поместим файл JSON в проект и укажем путь к нему в секции dashboard вместо кода.

283
00:26:36,466 --> 00:26:40,032
Вот и все. Проверяем, что все работает.

284
00:26:40,033 --> 00:26:42,933
Как видите, мы сделали все, что было запланировано.

285
00:26:42,933 --> 00:26:47,033
Присоединяйтесь к сообществу и смело задавайте любые вопросы.

286
00:26:47,033 --> 00:26:52,699
Ответы на многие вопросы можно найти в документации на нашем сайте, а также на странице аддона.

287
00:26:52,700 --> 00:26:56,366
Скачивайте и используйте другие дополнения из каталога CUBA.

288
00:26:56,366 --> 00:27:01,499
Подписывайтесь на нас на GItHub, на наш Twitter и YouTube-канал! Все ссылки доступны под видео.

289
00:27:01,500 --> 00:27:03,333
Спасибо за просмотр!

